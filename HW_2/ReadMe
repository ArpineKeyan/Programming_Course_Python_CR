Իրականացվել են հետևյալ ֆունկցիաները`
contain(data, val) - ստուգում է, էլեմենտ պարունակվում է լիստում, թե ոչ
pop(i=None) - եթե արգումենտ չի փոխանցվել, այսինքն i-ին վերագրվել է None արժեքը, ջնջում է վերջին անդամը, հակառակ դեպքում ջնջում է i-րդ ինդեքսում գտնվող անդամը, և անդամը վերադարձվում է որպես արդյունք
remave_all(data, value) - ջնջում է data-ում եղած բոլոն անդամները, որոնց արժեքը հավասար է value-ին (իրականացնելիս կարող եք օգտվել remօve մեթոդից)
reverse(data) - շրջում է data-ն հակառակ դասավորությամբ
min(data) - վերադարձնում է data-ի ամենափոքր անդամը
max(data) - վերադարձնում է data-ի ամենամեծ անդամը 



Իրականացնել map և filter ֆունկցիաները, որոնց միջոցով լուծել հետևյալ խնդիրները
գրել triple(data) ֆունկցիա, որը վերադարձնում է data-ի անդամների եռապատիկները պարունակող լիստ
իրականացնել map3(func, data1, data2, data3) ֆունկցիա, որը վերադարձնում է նոր լիստ, որի մեջ ներառված են func-ի կանչի արդյունքները data1, data2 և data3-ի համապատասխան անդամների անդամների վրա, օրինակ, եթե ունենք sum(a, b, c) ֆունկցիան, որը վերադարձնում է a, b և c թվերի գումարը, map(sum, [1, 2, 3], [10, 20, 30], [100, 200, 300]) կվերադարձնի [111, 222, 333]
իրականացնել map2(func, data1, data2) ֆունկցիա, դրա օգնությամբ գրել ծրագիր, որը կտպի էկրանին նոր լիստ, որի i-րդ անդամը կլինի bases-ի i-րդ անդամը exp-ի i-րդ անդամով աստիճան բարձրացրած, որտեղ base = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], exp = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
